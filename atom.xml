<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GAJYA的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gajya.github.io/"/>
  <updated>2017-10-28T00:39:58.000Z</updated>
  <id>http://gajya.github.io/</id>
  
  <author>
    <name>GAJYA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://gajya.github.io/2018/11/19/hello-world/"/>
    <id>http://gajya.github.io/2018/11/19/hello-world/</id>
    <published>2018-11-19T07:26:04.930Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试准备---ajax</title>
    <link href="http://gajya.github.io/2018/10/23/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E2%80%94%E2%80%94ajax/"/>
    <id>http://gajya.github.io/2018/10/23/面试准备——ajax/</id>
    <published>2018-10-23T11:00:16.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h2><p>AJAX(Asynchronous Javascript And XML) = 异步 JavaScript + XML 在后台与服务器进行<code>异步数据交换</code>，不用重载整个网页，实现局部刷新。</p><a id="more"></a><p>ajax的工作原理相当于在用户和服务器之间加了一个中间层，使用户操作与服务器响应异步化。交互模型为，ajax在浏览器端引入一个执行引擎，它一边接收user请求，一边传送数据给服务器，并把服务器端返回的结果展现给user。</p><p>简单说，通过 XMLHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用js来操作DOM而更新页面。关键是从服务器获取数据</p><p><strong>同步：</strong>脚本会停留并等待服务器发送回复然后继续</p><p><strong>异步：</strong>脚本不停留并处理可能的回复</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>不用重载整个网页，实现局部刷新</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不支持浏览器的back按钮</li><li>安全问题，ajax暴露了与服务器交互的细节</li><li>对搜索引擎的支持比较弱</li><li>不容易调试</li></ul><h2 id="创建ajax的步骤"><a href="#创建ajax的步骤" class="headerlink" title="创建ajax的步骤"></a>创建ajax的步骤</h2><ol><li>创建一个XMLHttpRequest对象</li><li>创建一个新的HTTP请求，并指定该HTTP请求类型、验证信息</li><li>设置请求头信息<code>setRequestHeader</code></li><li>设置响应 HTTP 请求状态变化的回调函数</li><li>发送 HTTP 请求</li><li>获取异步调用返回的数据</li><li>使用 JavaScript 和 DOM 实现局部刷新</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; (xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>)) &#123;</span><br><span class="line">        fn.call(<span class="keyword">this</span>, xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure><h3 id="常见的http状态码以及代表的意义"><a href="#常见的http状态码以及代表的意义" class="headerlink" title="常见的http状态码以及代表的意义"></a>常见的http状态码以及代表的意义</h3><p>200（OK)：请求成功</p><p>301：永久重定向</p><p>303（See Other）：告知客户端使用另一个URL来获取资源</p><p>400（Bad Request)：请求格式错误</p><pre><code>1. 语义有误（客户端请求有语法错误），当前请求无法被服务器理解，除非修改，否则客户端不应该重复提交这个请求2. 请求参数有误</code></pre><p>404（Not Found)：请求失败，请求所希望得到的资源未被在服务器上发现</p><p>500（Internal Server Error)：服务器遇到一个未曾预料的状况，导致它无法完成对请求的处理</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是ajax&quot;&gt;&lt;a href=&quot;#什么是ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是ajax&quot;&gt;&lt;/a&gt;什么是ajax&lt;/h2&gt;&lt;p&gt;AJAX(Asynchronous Javascript And XML) = 异步 JavaScript + XML 在后台与服务器进行&lt;code&gt;异步数据交换&lt;/code&gt;，不用重载整个网页，实现局部刷新。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="js" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/js/"/>
    
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://gajya.github.io/tags/js/"/>
    
      <category term="面试" scheme="http://gajya.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备——html</title>
    <link href="http://gajya.github.io/2018/10/21/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E2%80%94%E2%80%94html/"/>
    <id>http://gajya.github.io/2018/10/21/面试准备——html/</id>
    <published>2018-10-21T02:31:23.000Z</published>
    <updated>2018-10-25T15:10:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><strong>语义化</strong></p><ul><li>HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构</li><li>css命名的语义化是指：为html标签添加有意义的class</li><li>为什么需要语义化：<ul><li>去掉样式后页面呈现清晰的结构</li><li>盲人使用读屏器更好地阅读</li><li>搜索引擎更好地理解页面，有利于收录</li><li>便团队项目的可持续运作及维护</li></ul></li></ul><a id="more"></a><p><strong>简述一下你对HTML语义化的理解？</strong></p><ul><li>用正确的标签做正确的事情。</li><li>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li><li>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;</li><li>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li></ul><p><strong>Doctype作用？标准模式与兼容模式各有什么区别?</strong></p><ul><li><code>&lt;!DOCTYPE&gt;</code>声明位于位<code>于HTML</code>文档中的第一行，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。<code>DOCTYPE</code>不存在或格式不正确会导致文档以兼容模式呈现</li><li>标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作</li></ul><p><strong>HTML5 为什么只需要写 ？</strong></p><ul><li>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）</li><li>而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型</li></ul><p><strong>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</strong></p><ul><li>行内元素有：<code>a b span img input select strong</code>（强调的语气）</li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code></li><li>常见的空元素:<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li></ul><p><strong>页面导入样式时，使用link和@import有什么区别？</strong></p><ul><li><code>link</code>属于<code>XHTML</code>标签，除了加载<code>CSS</code>外，还能用于定义<code>RSS</code>,定义<code>rel</code>连接属性等作用；而<code>@import</code>是<code>CSS</code>提供的，只能用于加载<code>CSS</code></li><li>页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的<code>CSS</code>会等到页面被加载完再加载</li><li><code>import</code>是<code>CSS2.1</code> 提出的，只在<code>IE5</code>以上才能被识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题</li></ul><p><strong>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</strong></p><ul><li>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加<ul><li>绘画 canvas</li><li>用于媒介回放的 video 和 audio 元素</li><li>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失</li><li>sessionStorage 的数据在浏览器关闭后自动删除</li><li>语意化更好的内容元素，比如 article、footer、header、nav、section</li><li>表单控件，calendar、date、time、email、url、search</li><li>新的技术webworker, websocket, Geolocation</li></ul></li><li>移除的元素：</li><li>纯表现的元素：basefont，big，center，font, s，strike，tt，u</li><li>对可用性产生负面影响的元素：frame，frameset，noframes</li><li>支持HTML5新标签：<ul><li>IE8/IE7/IE6支持通过document.createElement方法产生的标签</li><li>可以利用这一特性让这些浏览器支持HTML5新标签</li><li>浏览器支持新标签后，还需要添加标签默认的样式</li></ul></li><li>当然也可以直接使用成熟的框架、比如html5shim</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script&gt; src=&quot;http://html5shim.googlecode.com</span><br><span class="line">/svn/trunk/html5.js&quot;&lt;/script&gt;&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><ul><li>如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素</li></ul><p><strong>HTML5的离线储存怎么使用，工作原理能不能解释一下？</strong></p><ul><li>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</li><li>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</li><li>如何使用：<ul><li>页面头部像下面一样加入一个manifest的属性；</li><li>在cache.manifest文件的编写离线存储的资源</li><li>在离线状态时，操作window.applicationCache进行需求实现</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">    #v0.11</span><br><span class="line">    CACHE:</span><br><span class="line">    js/app.js</span><br><span class="line">    css/style.css</span><br><span class="line">    NETWORK:</span><br><span class="line">    resourse/logo.png</span><br><span class="line">    FALLBACK:</span><br><span class="line">    / /offline.html</span><br></pre></td></tr></table></figure><p><strong>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</strong></p><ul><li>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul><p><strong>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</strong></p><ul><li>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li><li><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</li><li>存储大小：<ul><li><code>cookie</code>数据大小不能超过4k</li><li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</li></ul></li><li>有期时间：<ul><li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除</li><li><code>cookie</code> 设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><p><strong>HTML5的form如何关闭自动完成功能？</strong></p><ul><li>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</li></ul><p><strong>页面可见性（Page Visibility API） 可以有哪些用途？</strong></p><ul><li>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;</li><li>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放</li></ul><p><strong>如何在页面上实现一个圆形的可点击区域？</strong></p><ul><li>map+area或者svg</li><li>border-radius</li><li>纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><p><strong>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>网页验证码是干嘛的，是为了解决什么安全问题</strong></p><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><p><strong>介绍一下你对浏览器内核的理解？</strong></p><ul><li>浏览器内核主要分为两部分：渲染引擎(layout engineer 或 Rendering Engine) 和 JS引擎</li><li>渲染引擎负责取得网页的内容进行布局计和样式渲染，然后会输出至显示器或打印机</li><li>JS引擎则负责解析和执行JS脚本来实现网页的动态效果和用户交互</li><li>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</li></ul><p><strong>常见的浏览器内核有哪些？</strong></p><ul><li>Blink内核：新版 Chrome、新版 Opera</li><li>Webkit内核：Safari、原Chrome</li><li>Gecko内核：FireFox、Netscape6及以上版本</li><li>Trident内核（又称MSHTML内核）：IE、国产浏览器</li><li>Presto内核：原Opera7及以上</li></ul><p><strong>HTML5有哪些新特性？</strong></p><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas</li></ul><p><strong>HTML5移除了那些元素？</strong></p><ul><li>纯表现的元素：basefont、big、center、font、s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul><p><strong>如何处理HTML5新标签的浏览器兼容问题？</strong></p><ul><li>通过 document.createElement 创建新标签</li><li>使用垫片 html5shiv.js</li></ul><p><strong>如何区分 HTML 和 HTML5？</strong></p><ul><li>DOCTYPE声明、新增的结构元素、功能元素</li></ul><p><strong>HTML5的离线储存工作原理能不能解释一下，怎么使用？</strong></p><ul><li>HTML5的离线储存原理：<ul><li>用户在线时，保存更新用户机器上的缓存文件；当用户离线时，可以正常访离线储存问站点或应用内容</li></ul></li><li>HTML5的离线储存使用：<ul><li>在文档的 html 标签设置 manifest 属性，如 manifest=”/offline.appcache”</li><li>在项目中新建 manifest 文件，manifest 文件的命名建议：xxx.appcache</li><li>在 web 服务器配置正确的 MIME-type，即 text/cache-manifest</li></ul></li></ul><p><strong>浏览器是怎么对HTML5的离线储存资源进行管理和加载的？</strong></p><ul><li>在线的情况下，浏览器发现 html 标签有 manifest 属性，它会请求 manifest 文件</li><li>如果是第一次访问app，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储</li><li>如果已经访问过app且资源已经离线存储了，浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作。如果文件改变了，那么就会重新下载文件中的资源并进行离线存储</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul><p><strong>iframe 有那些优点和缺点？</strong></p><ul><li>优点：<ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul></li><li>缺点：<ul><li>iframe 会阻塞主页面的 onload 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li></ul></li><li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li></ul><p><strong>label 的作用是什么？怎么使用的？</strong></p><ul><li>label标签来定义表单控件的关系：<ul><li>当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上</li></ul></li><li>使用方法1：<ul><li><code>&lt;label for=&quot;mobile&quot;&gt;Number:&lt;/label&gt;</code></li><li><code>&lt;input type=&quot;text&quot; id=&quot;mobile&quot;/&gt;</code></li></ul></li><li>使用方法2：<ul><li><code>&lt;label&gt;Date:&lt;input type=&quot;text&quot;/&gt;&lt;/label&gt;</code></li></ul></li></ul><p><strong>如何实现浏览器内多个标签页之间的通信？</strong></p><ul><li>iframe + contentWindow</li><li>postMessage</li><li>SharedWorker(Web Worker API)</li><li>storage 事件(localStorge API)</li><li>WebSocket</li></ul><p><strong>webSocket 如何兼容低浏览器？</strong></p><ul><li>Adobe Flash Socket</li><li>ActiveX HTMLFile (IE)</li><li>基于 multipart 编码发送 XHR</li><li>基于长轮询的 XHR</li></ul><p><strong>页面可见性（Page Visibility API） 可以有哪些用途？</strong></p><ul><li>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放</li><li>当用户浏览其他页面，暂停网站首页幻灯自动播放</li><li>完成登陆后，无刷新自动同步其他页面的登录状态</li></ul><p><strong>title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？</strong></p><ul><li>title 表示是整个页面标题，h1 则表示层次明确的标题，对页面信息的抓取有很大的影响</li><li><p>strong 标明重点内容，有语气加强的含义，使用阅读设备阅读网络时，strong 会重读，而 b是展示强调内容</p></li><li><p>i 内容展示为斜体，em 表示强调的文本</p></li><li>自然样式标签：b, i, u, s, pre</li><li>语义样式标签：strong, em, ins, del, code</li><li>应该准确使用语义样式标签, 但不能滥用。如果不能确定时，首选使用自然样式标签</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;语义化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构&lt;/li&gt;
&lt;li&gt;css命名的语义化是指：为html标签添加有意义的class&lt;/li&gt;
&lt;li&gt;为什么需要语义化：&lt;ul&gt;
&lt;li&gt;去掉样式后页面呈现清晰的结构&lt;/li&gt;
&lt;li&gt;盲人使用读屏器更好地阅读&lt;/li&gt;
&lt;li&gt;搜索引擎更好地理解页面，有利于收录&lt;/li&gt;
&lt;li&gt;便团队项目的可持续运作及维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="h5" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95/h5/"/>
    
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="h5" scheme="http://gajya.github.io/tags/h5/"/>
    
      <category term="面试" scheme="http://gajya.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6简单复习记录</title>
    <link href="http://gajya.github.io/2018/10/10/ES6%E7%AE%80%E5%8D%95%E5%A4%8D%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://gajya.github.io/2018/10/10/ES6简单复习记录/</id>
    <published>2018-10-10T10:43:32.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><ul><li>箭头函数</li><li>数组的扩展运算符</li></ul><a id="more"></a><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><ul><li>Object.keys、values、entries</li><li>对象方法简写，计算属性（主要掌握）</li><li>展开运算符（不是es6标准，但是babel也支持）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">'myjob'</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    num: <span class="number">1</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">'tiger'</span>,</span><br><span class="line">    job: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    work()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="string">'fe'</span>, <span class="comment">// 这样写打印出来，只是key: "fe"</span></span><br><span class="line">    [key]: <span class="string">'fe'</span>, <span class="comment">// </span></span><br><span class="line">    [key+<span class="string">'word'</span>]: <span class="string">'fe'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印的结果</p><p><img src="/Users/luoli/Library/Application%20Support/typora-user-images/image-20181010180702406.png" alt="image-20181010180702406"></p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li>数组解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> [num1, num2] = arr</span><br><span class="line"><span class="built_in">console</span>.log(num1,num2)  <span class="comment">// num1 = 1  num2 = 2</span></span><br></pre></td></tr></table></figure><ul><li>对象解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">type</span>: <span class="string">'IT'</span>,<span class="attr">name</span>: <span class="string">'tiger'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;type, name&#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(type,name)  <span class="comment">// type = IT  name = tiger</span></span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>告别seajs和require.js</p><ul><li>Import,import{}</li><li>Export, Export default</li><li>Node现在还不支持，需要用require来加载文件</li></ul><h3 id="Async-await-ES7"><a href="#Async-await-ES7" class="headerlink" title="Async await(ES7)"></a>Async await(ES7)</h3><p>更优雅的处理异步</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h3 id=&quot;函数的扩展&quot;&gt;&lt;a href=&quot;#函数的扩展&quot; class=&quot;headerlink&quot; title=&quot;函数的扩展&quot;&gt;&lt;/a&gt;函数的扩展&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;数组的扩展运算符&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/"/>
    
      <category term="es6" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/es6/"/>
    
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://gajya.github.io/tags/javascript/"/>
    
      <category term="es6" scheme="http://gajya.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>hexo的常用命令</title>
    <link href="http://gajya.github.io/2018/10/10/hexo%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://gajya.github.io/2018/10/10/hexo的常用命令/</id>
    <published>2018-10-10T10:32:25.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><ul><li><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code>    <strong>新建文章</strong></li><li><code>hexo p</code> == <code>hexo publish</code>   <strong>发布草稿 </strong></li><li><code>hexo g</code> == <code>hexo generate</code>   <strong>生成 </strong></li><li><code>hexo s</code> == <code>hexo server</code>   <strong>启动服务预览</strong></li><li><code>hexo d</code> == <code>hexo deploy</code>   <strong>部署</strong></li></ul><a id="more"></a><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote><p>两个命令的作用是相同的 hexo generate –deploy hexo deploy –generate</p></blockquote><p>简写： <code>hexo d -g</code> #完成后部署 <code>hexo s -g</code> #完成后启动本地服务，可通过默认端口预览访问</p><h2 id="只展示部分博客内容"><a href="#只展示部分博客内容" class="headerlink" title="只展示部分博客内容"></a>只展示部分博客内容</h2><p><code>&lt;!--more--&gt;</code></p><p> 以下是余下全文</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简写&quot;&gt;&lt;a href=&quot;#简写&quot; class=&quot;headerlink&quot; title=&quot;简写&quot;&gt;&lt;/a&gt;简写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hexo n &amp;quot;我的博客&amp;quot;&lt;/code&gt; == &lt;code&gt;hexo new &amp;quot;我的博客&amp;quot;&lt;/code&gt;    &lt;strong&gt;新建文章&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo p&lt;/code&gt; == &lt;code&gt;hexo publish&lt;/code&gt;   &lt;strong&gt;发布草稿 &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo g&lt;/code&gt; == &lt;code&gt;hexo generate&lt;/code&gt;   &lt;strong&gt;生成 &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo s&lt;/code&gt; == &lt;code&gt;hexo server&lt;/code&gt;   &lt;strong&gt;启动服务预览&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo d&lt;/code&gt; == &lt;code&gt;hexo deploy&lt;/code&gt;   &lt;strong&gt;部署&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其它" scheme="http://gajya.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="其它" scheme="http://gajya.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式系统的基本原理</title>
    <link href="http://gajya.github.io/2018/09/25/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://gajya.github.io/2018/09/25/Vue响应式系统的基本原理/</id>
    <published>2018-09-25T05:44:02.000Z</published>
    <updated>2018-10-25T15:10:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h2><p>Vue.js 是一款 MVVM 框架，数据模型仅仅是普通的 JavaScript 对象，但是对这些对象进行操作时，却能影响对应视图，它的核心实现就是「<strong>响应式系统</strong>」。</p><a id="more"></a><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    obj: 目标对象</span></span><br><span class="line"><span class="comment">    prop: 需要操作的目标对象的属性名</span></span><br><span class="line"><span class="comment">    descriptor: 描述符</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    return value 传入对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)...</span><br></pre></td></tr></table></figure><p>descriptor的一些属性，简单介绍几个属性，具体可以参考 <a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FObject%2FdefineProperty" target="_blank" rel="noopener">MDN 文档</a>。</p><ul><li>enumerable，属性是否可枚举，默认false</li><li>configurable，属性是否可以被修改或者删除，默认false</li><li>get,获取属性的方法</li><li>set，设置属性的方法</li></ul><h2 id="实现observer（可观察的）"><a href="#实现observer（可观察的）" class="headerlink" title="实现observer（可观察的）"></a>实现observer（可观察的）</h2><p>在 new Vue() 之后。 Vue 会调用 _init 函数进行初始化，也就是这里的 init 过程（流程图的init），它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过 Object.defineProperty 设置 setter 与 getter 函数，用来实现「响应式」以及「依赖收集」…</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageslim" alt="img"></p><p>为了便于理解，我们不考虑数组等复杂的情况，只对对象进行处理。</p><ol><li>首先我们定义一个 cb 函数，这个函数用来模拟视图更新，调用它即代表更新视图，内部可以是一些更新视图的方法。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 渲染视图 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"视图更新啦～"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue的双向数据绑定"><a href="#vue的双向数据绑定" class="headerlink" title="vue的双向数据绑定"></a>vue的双向数据绑定</h3><ol start="2"><li>定义一个 defineReactive ，这个方法通过 Object.defineProperty 来实现对对象的「响应式」化，入参是一个 obj（需要绑定的对象）、key（obj的某一个属性），val（具体的值）。经过 defineReactive 处理以后，我们的 obj 的 key 属性在「读」的时候会触发 reactiveGetter 方法，而在该属性被「写」的时候则会触发 reactiveSetter 方法。</li><li>当然这是不够的，我们需要在上面再封装一层 observer 。这个函数传入一个 value（需要「响应式」化的对象），通过遍历所有属性的方式对该对象的每一个属性都通过 defineReactive 处理。（注：实际上 observer 会进行递归调用，为了便于理解去掉了递归的过程）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        defineReactive(data, key, data[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol start="4"><li><p>用 <code>observer</code> 来封装一个 Vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第四步</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Vue构造类 */</span></span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>._data = options.data;</span><br><span class="line">        observer(<span class="keyword">this</span>._data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们只要 new 一个 Vue 对象，就会将 <code>data</code> 中的数据进行「<strong>响应式</strong>」化。如果我们对 <code>data</code> 的属性进行下面的操作，就会触发 <code>cb</code> 方法更新视图。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        test: <span class="string">"I am test."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">o._data.test = <span class="string">"hello,world."</span>;  <span class="comment">/*  哈哈哈，监听到值变化了,I am test. --&gt; hello,world. */</span></span><br></pre></td></tr></table></figure><p>Over</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;响应式系统&quot;&gt;&lt;a href=&quot;#响应式系统&quot; class=&quot;headerlink&quot; title=&quot;响应式系统&quot;&gt;&lt;/a&gt;响应式系统&lt;/h2&gt;&lt;p&gt;Vue.js 是一款 MVVM 框架，数据模型仅仅是普通的 JavaScript 对象，但是对这些对象进行操作时，却能影响对应视图，它的核心实现就是「&lt;strong&gt;响应式系统&lt;/strong&gt;」。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="http://gajya.github.io/tags/vue/"/>
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用v-for要加上唯一的key</title>
    <link href="http://gajya.github.io/2018/09/20/v-for%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/"/>
    <id>http://gajya.github.io/2018/09/20/v-for中为什么要添加唯一的key/</id>
    <published>2018-09-20T07:52:22.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="http://gajya.github.io/tags/vue/"/>
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vuelidate</title>
    <link href="http://gajya.github.io/2018/06/21/Vuelidate/"/>
    <id>http://gajya.github.io/2018/06/21/Vuelidate/</id>
    <published>2018-06-21T07:52:22.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuelidate简介"><a href="#Vuelidate简介" class="headerlink" title="Vuelidate简介"></a>Vuelidate简介</h2><p>Vuelidate是一款简单轻量级的基于模块的Vue.js验证插件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装很简单，用npm来安装只需要一句话：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vuelidate --save</span><br><span class="line">npm i -S vuelidate               <span class="comment">//简写</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在main.js中导入库并用作Vue插件，以便在包含验证配置的所有组件上全局启用该功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuelidate <span class="keyword">from</span> <span class="string">'vuelidate'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuelidate)<span class="comment">//安装插件</span></span><br></pre></td></tr></table></figure><h3 id="内置验证规则"><a href="#内置验证规则" class="headerlink" title="内置验证规则"></a>内置验证规则</h3><ul><li>required: 需要非空数据。检查仅包含空格的空数组和字符串。</li><li>maxLength:要求输入具有最大指定长度（包括最大值）。适用于数组。</li><li>minLength:要求输入具有最小指定长度（包括最小值）。适用于数组。</li><li>email: 接受有效的电子邮件地址。请记住，您仍然需要在服务器上进行仔细验证，因为无法发送验证电子邮件地址是否是真实的。</li><li>between: 检查数字或日期是否在指定范围内。最小值和最大值都包括在内。</li><li>ipAddress: 接受点分十进制表示形式的有效IPv4地址，如127.0.0.1。</li><li>alpha: 只接受字母字符。</li><li>alphaNum: 只接受字母数字。</li><li>numeric: 只接受数字。</li><li>sameAs: 检查给定属性是否相等。</li><li>url: 只接受网址。</li><li>or: 当至少有一个提供的验证器通过时通过。</li><li>and: 所有提供的验证器都通过时通过。</li><li>requiredIf: 仅当提供的属性或谓词为真时才需要非空数据。</li><li>requiredUnless: 仅当提供的属性或谓词为假时才需要非空数据。</li><li>minValue: 要求输入具有指定的最小数值或日期。</li><li>maxValue: 要求输入具有指定的最大数值或日期。</li></ul><h3 id="自定义验证规则（Custom-Validators）"><a href="#自定义验证规则（Custom-Validators）" class="headerlink" title="自定义验证规则（Custom Validators）"></a>自定义验证规则（Custom Validators）</h3><p>除了使用Vuelidate自带的内置验证规则外还可以使用自定义规则满足需求。</p><p>最简单的方法就是直接在当前文件的script里面设置校验规则，当然也可以单独的写一个my-validators.js的文件，无论是单独写还是抽离出来都需要引入.详情请参考  <a href="https://monterail.github.io/vuelidate/#custom-validators" target="_blank" rel="noopener">vuelidate的自定义验证规则</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; regex &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators/common'</span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">import</span> &#123; helpers &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></span><br></pre></td></tr></table></figure><p>例子：</p><p>register.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 先引入需要用到的验证规则</span></span><br><span class="line"><span class="keyword">import</span> &#123; required, maxLength, sameAs &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></span><br><span class="line"><span class="keyword">import</span> &#123; regex &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators/common'</span></span><br><span class="line"><span class="keyword">var</span> phone = regex(<span class="string">'phoneNumber'</span>, /^<span class="number">1</span>(<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">7</span>|<span class="number">8</span>)\d&#123;<span class="number">9</span>&#125;$/) <span class="comment">// 手机号码校验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            user: &#123;</span><br><span class="line">                username: <span class="string">''</span>,</span><br><span class="line">                password: <span class="string">''</span>,</span><br><span class="line">                confirmPassword: <span class="string">''</span>,</span><br><span class="line">                phone: <span class="string">''</span>,</span><br><span class="line">                phoneCode: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 2.定义验证字段的规则</span></span><br><span class="line">    validations: &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">            username: &#123;</span><br><span class="line">                required,</span><br><span class="line">                <span class="comment">// minLength: minLength(2),</span></span><br><span class="line">                maxLength: maxLength(<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">async</span> isUnique (value) &#123; <span class="comment">// 异步校验用户名是否已注册</span></span><br><span class="line">                    <span class="keyword">if</span> (value === <span class="string">''</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">`/api/unique/name/<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Boolean</span>(<span class="keyword">await</span> response.json())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            password: &#123;</span><br><span class="line">                required</span><br><span class="line">            &#125;,</span><br><span class="line">            confirmPassword: &#123;</span><br><span class="line">                sameAsPassword: sameAs(<span class="string">'password'</span>) <span class="comment">// 校验密码是否一致</span></span><br><span class="line">            &#125;,</span><br><span class="line">            phone: &#123;</span><br><span class="line">                required,</span><br><span class="line">                phone  <span class="comment">// 直接就是用的上面const设置的校验规则，自定义校验</span></span><br><span class="line">            &#125;,</span><br><span class="line">            phoneCode: &#123;</span><br><span class="line">                required</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>register.vue的html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; 'form-group--error': $v.user.password.$error &#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"$v.user.password.$model"</span> </span></span><br><span class="line"><span class="tag">           @<span class="attr">blur</span>=<span class="string">"$v.user.password.$touch()"</span> <span class="attr">class</span>=<span class="string">"input-line"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"password"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">"请设置密码"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"form-group__message"</span> <span class="attr">v-if</span>=<span class="string">"!$v.user.password.required"</span>&gt;</span>密码不能为空<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; 'form-group--error': $v.user.confirmPassword.$error &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"$v.user.confirmPassword.$model"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">"input-line"</span> <span class="attr">type</span>=<span class="string">"password"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">"请确认密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"form-group__message"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">"!$v.user.confirmPassword.sameAsPassword"</span>&gt;</span>两次输入的密码不一致<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; 'form-group--error': $v.user.phone.$error &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"$v.user.phone.$model"</span> </span></span><br><span class="line"><span class="tag">           @<span class="attr">blur</span>=<span class="string">"$v.user.phone.$touch()"</span> <span class="attr">class</span>=<span class="string">"input-line"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">"请输入手机号码"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"form-group__message"</span> <span class="attr">v-if</span>=<span class="string">"!$v.user.phone.required"</span>&gt;</span>手机号码不能为空<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"form-group__message"</span> <span class="attr">v-if</span>=<span class="string">"!$v.user.phone.phone"</span>&gt;</span>请输入正确的手机号码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Register.vue的css部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表单验证样式 */</span></span><br><span class="line"><span class="selector-class">.form-group__message</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#CC3333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-group--error</span> &gt; <span class="selector-tag">input</span> + <span class="selector-class">.form-group__message</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#CC3333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-group--error</span> <span class="selector-tag">input</span>, <span class="selector-class">.form-group--error</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>, <span class="selector-class">.form-group--error</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.form-group--error</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#CC3333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vuelidate简介&quot;&gt;&lt;a href=&quot;#Vuelidate简介&quot; class=&quot;headerlink&quot; title=&quot;Vuelidate简介&quot;&gt;&lt;/a&gt;Vuelidate简介&lt;/h2&gt;&lt;p&gt;Vuelidate是一款简单轻量级的基于模块的Vue.js验证插件。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;安装很简单，用npm来安装只需要一句话：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vuelidate --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i -S vuelidate               &lt;span class=&quot;comment&quot;&gt;//简写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
      <category term="工具" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/vue/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vue" scheme="http://gajya.github.io/tags/vue/"/>
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue-工具" scheme="http://gajya.github.io/tags/vue-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli的使用方法</title>
    <link href="http://gajya.github.io/2017/10/19/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://gajya.github.io/2017/10/19/vue-cli的使用方法/</id>
    <published>2017-10-19T03:41:28.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue-cli这个构建工具大大降低了webpack的使用难度，支持热更新，有webpack-dev-server的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK。</p><h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><ol><li>使用npm(需要安装node环境)全局安装webpack    <code>npm install webpack -g</code>，安装完毕后可以<code>webpack -v</code>检查webpack的版本号，有显示的话表示成功安装</li></ol><p><strong>注意：webpack4.x开始，需要安装webpack-cli依赖，命令<code>npm i webpack webpack-cli -g</code></strong></p><a id="more"></a><ol start="2"><li>全局安装vue-cli，命令<code>npm i vue-cli -g</code>，安装成功<code>vue -V</code>（<strong>v大写</strong>）检查版本号，判断是否安装成功。打开node_modules可以看到vue-cli文件夹</li></ol><h2 id="用vue-cli初始化项目"><a href="#用vue-cli初始化项目" class="headerlink" title="用vue-cli初始化项目"></a>用vue-cli初始化项目</h2><ol><li>新建文件夹<code>test</code>，打开命令行工具，cd进入该文件夹输入：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack TodoList</span><br></pre></td></tr></table></figure><p>TodoList是自定义的项目名称，命令执行后，会在test下生成一个该名称命名的项目文件夹</p><p><img src="/Users/luoli/Library/Application Support/typora-user-images/image-20181019120520437.png" alt="image-20181019120520437"></p><p>输入命令后，会跳出几个选项让你回答：</p><ul><li>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters），阮一峰老师博客<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="noopener">为什么文件名要小写</a> ，可以参考一下。</li><li>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</li><li>Author ()： —-作者，输入你的大名<br>接下来会让用户选择：</li><li>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了<br>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</li><li>Install vue-router? (Y/n) 是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</li><li>Use ESLint to lint your code? (Y/n) 是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。<br>接下来也是选择题Pick an ESLint preset (Use arrow keys) 选择一个ESLint预设，编写vue项目时的代码风格，standard比较松散，所以可以直接y回车</li><li>Set up unit tests  (Y/n) 是否安装单元测试，我选择安装y回车</li><li>Setup e2e tests with Nightwatch(Y/n)? 是否安装e2e测试 ，我选择安装y回车</li></ul><p>回答完毕后上图就开始构建项目了。</p><ol start="2"><li><p>配置完成后，可以看到目录下多了一个项目文件夹TodoList，cd进入这个文件夹，安装依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><p>( 如果安装速度太慢。可以安装淘宝镜像，打开命令行工具，输入：<br> <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br> 然后使用<code>cnpm</code>来安装 )</p><p>npm install ：</p><p>安装所有的模块，如果是安装具体的某个模块，在install 后面输入模块的名字即可。而只输入install就会按照项目的根目录下的package.json文件中依赖的模块安装（这个文件里面是不允许有任何注释的），每个使用npm管理的项目都有这个文件，是npm操作的入口文件。</p><p>因为是初始项目，还没有任何模块，所以用npm install 安装所有的模块。安装完成后，目录中会多出来一个node_modules文件夹，这里放的就是所有依赖的模块。</p><p>解释下每个文件夹代表的意思(仔细看一下这张图）：</p><p><img src="https://upload-images.jianshu.io/upload_images/10868449-01a038fa573b22c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/443" alt="img"></p></li></ol><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>Cd进入TodoList文件夹，执行命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p>1.浏览器打开后，没有加载出页面</p><p>​    可能是本地8080端口占用，可以修改配置文件config里面的index.js</p><ol start="2"><li><p>本地调试时，打包遇到问题</p><p>建议将配置文件config里面的index.js的build 里的<code>assetsPublicPath</code>的路径前缀修改为 ‘ ./ ‘（开始是 ‘ / ‘），因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径</p></li><li><p>在进行vue页面调试时，建议去谷歌商店下载一个vue-tool扩展程序。</p></li></ol><h2 id="vue-cli的webpack配置分析"><a href="#vue-cli的webpack配置分析" class="headerlink" title="vue-cli的webpack配置分析"></a>vue-cli的webpack配置分析</h2><ul><li><p>从<code>package.json</code>可以看到开发和生产环境的入口。</p><p><img src="/Users/luoli/Library/Application Support/typora-user-images/image-20181019130507720.png" alt="image-20181019130507720"></p></li><li><p>可以看到dev中的设置，build/webpack.dev.conf.js，该文件是开发环境中webpack的配置入口。</p></li><li><p>在webpack.dev.conf.js中出现webpack.base.conf.js，这个文件是开发环境和生产环境，甚至测试环境，这些环境的公共webpack配置。可以说，这个文件相当重要。</p></li><li><p>还有config/index.js 、build/utils.js 、build/build.js等，具体请看这篇介绍：<br><a href="https://link.jianshu.com/?t=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000008644830" target="_blank" rel="noopener">vue-cli webpack配置分析</a></p></li></ul><h2 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h2><p>注意，自己的项目文件都需要放到 src 文件夹下。<br>在项目开发完成之后，可以输入 <code>npm run build</code> 来进行打包工作。</p><p>另：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>npm 开启了npm run dev以后怎么退出或关闭？</span><br><span class="line">ctrl+c</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>--save-dev</span><br><span class="line">自动把模块和版本号添加到模块配置文件package.json中的依赖里devdependencies部分</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> --save-dev 与 --save 的区别</span><br><span class="line">--save     安装包信息将加入到dependencies（生产阶段的依赖）</span><br><span class="line">--save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</span><br></pre></td></tr></table></figure><p>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看。<br>项目上线时，只需要将 dist 文件夹放到服务器就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue-cli这个构建工具大大降低了webpack的使用难度，支持热更新，有webpack-dev-server的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK。&lt;/p&gt;
&lt;h2 id=&quot;安装vue-cli&quot;&gt;&lt;a href=&quot;#安装vue-cli&quot; class=&quot;headerlink&quot; title=&quot;安装vue-cli&quot;&gt;&lt;/a&gt;安装vue-cli&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用npm(需要安装node环境)全局安装webpack    &lt;code&gt;npm install webpack -g&lt;/code&gt;，安装完毕后可以&lt;code&gt;webpack -v&lt;/code&gt;检查webpack的版本号，有显示的话表示成功安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：webpack4.x开始，需要安装webpack-cli依赖，命令&lt;code&gt;npm i webpack webpack-cli -g&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="http://gajya.github.io/tags/vue/"/>
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="http://gajya.github.io/2017/09/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://gajya.github.io/2017/09/26/文件上传/</id>
    <published>2017-09-26T07:41:07.000Z</published>
    <updated>2018-10-25T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的文件上传"><a href="#简单的文件上传" class="headerlink" title="简单的文件上传"></a>简单的文件上传</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadForm"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"myFile"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个最简单的文件上传。但是。。。ummmm，够胆你就提交这样的代码吧</p><a id="more"></a><h2 id="常用的上传方式——FormData"><a href="#常用的上传方式——FormData" class="headerlink" title="常用的上传方式——FormData"></a>常用的上传方式——FormData</h2><p>通过在脚本里新建FormData对象，把file对象设置到表单项中，然后利用XMLHttpRequest异步上传到服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">'myFil</span></span><br><span class="line"><span class="string">                                        e'</span>)</span><br><span class="line"><span class="keyword">var</span> file = fileInput.files[<span class="number">0</span>]</span><br><span class="line">formData.append(<span class="string">'filename'</span>, file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formData) <span class="comment">// 打印不出来东西</span></span><br><span class="line"><span class="comment">// 直接打印是看不到的，要用FormData的get()和getAll()方法</span></span><br><span class="line">formData.getAll(<span class="string">"filename"</span>)</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">'/upload.js'</span>)</span><br><span class="line"></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 对请求成功的处理</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send(formData)</span><br><span class="line">xhr = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>以上，可以完成最基本的需求</p><p><a href="https://www.jianshu.com/p/46e6e03a0d53" target="_blank" rel="noopener">通过jQuery Ajax使用FormData对象上传文件</a></p><h2 id="上传进度"><a href="#上传进度" class="headerlink" title="上传进度"></a>上传进度</h2><p>XMLHttpRequest Level 2中，传送数据的时候，有一个progress事件，上传数据progress事件属于XMLHttpRequest.upload对象，上传数据过程中会触发，这个对象拥有下列方法：</p><p>这个对象拥有下列下列方法：</p><ul><li>onloadstart</li><li>onprogress</li><li>onabort</li><li>onerror</li><li>onload</li><li>ontimeout</li><li>onloadend</li></ul><p>这些方法在XHR对象中都存在同名版本，区别是后者是用于加载资源时，而前者用于资源上传时。其中onprogress 事件回调方法可用于跟踪资源上传的进度，它的event参数对象包含两个重要的属性loaded和total。分别代表当前已上传的字节数（number of bytes）和文件的总字节数。比如我们可以这样计算进度百分比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.lengthComputable) &#123; <span class="comment">// lengthComputable ---- 文件总大小是否可知</span></span><br><span class="line">        <span class="keyword">var</span> percent = (e.loaded / e.total) * <span class="number">100</span></span><br><span class="line">        <span class="comment">// 对进度进行处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现代浏览器配合h5提供的<code>progress</code>享用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">"myProgress"</span> <span class="attr">value</span>=<span class="string">"50"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其value属性绑定上面代码中的<code>percent</code>的值即可。</p><p><strong>因为xhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发，每50ms触发一次。所以文件太小网络环境好的时候是直接到100%的。</strong></p><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><p>普通青年的图片预览方式是待文件上传成功后，后台返回上传文件的url，然后把预览图片的img元素的src指向该url。这其实达不到预览的效果和目的。</p><p>属于文艺青年的现代浏览器又登场了：“使用HTML5的FileReader API吧！” 让我们直接上代码，直奔主题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleImageFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> previewArea = <span class="built_in">document</span>.getElementById(<span class="string">'previewArea'</span>);</span><br><span class="line">       <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">       <span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">"myFile"</span>);</span><br><span class="line">       <span class="keyword">var</span> file = fileInput.files[<span class="number">0</span>];</span><br><span class="line">       img.file = file;</span><br><span class="line">       previewArea.appendChild(img);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">       reader.onload = (<span class="function"><span class="keyword">function</span>(<span class="params">aImg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                 aImg.src = e.target.result;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;)(img);</span><br><span class="line">       reader.readAsDataURL(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用FileReader来处理图片的异步加载。在创建新的FileReader对象之后，我们建立了onload函数，然后调用readAsDataURL()开始在后台进行读取操作。当图像文件加载后，转换成一个 data: URL，并传递到onload回调函数中设置给img的src。</p><p>另外我们还可以通过使用对象URL来实现预览</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src = <span class="built_in">window</span>.URL.createObjectURL(file);;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 明确地通过调用释放</span></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(<span class="keyword">this</span>.src);</span><br><span class="line">&#125;</span><br><span class="line">previewArea.appendChild(img);</span><br></pre></td></tr></table></figure><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"myFile"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时代码里拿到的FileUpload对象的files属性就是一个选中的多文件的数组了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">"myFile"</span>);</span><br><span class="line"><span class="keyword">var</span> files = fileInput.files;</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = files[i];</span><br><span class="line">    formData.append(<span class="string">'files[]'</span>, file, file.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FormData的append方法提供第三个可选参数用于指定文件名，这样就可以使用同一个表单项名，然后用文件名区分上传的多个文件。这样也方便前后台的循环操作。</p><h2 id="拖拽选择文件"><a href="#拖拽选择文件" class="headerlink" title="拖拽选择文件"></a>拖拽选择文件</h2><p>利用HTML5的drag &amp; drop事件来实现对拖拽的支持。首先我们可能需要确定一个允许拖放的区域，然后绑定相应的事件进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dropArea</span><br><span class="line"></span><br><span class="line">dropArea = <span class="built_in">document</span>.getElementById(<span class="string">"dropArea"</span>)</span><br><span class="line">dropArea.addEventListener(<span class="string">"dragenter"</span>, handleDragenter, <span class="literal">false</span>)</span><br><span class="line">dropArea.addEventListener(<span class="string">"dragover"</span>, handleDragover, <span class="literal">false</span>)</span><br><span class="line">dropArea.addEventListener(<span class="string">"drop"</span>, handleDrop, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止dragenter和dragover的默认行为，这样才能使drop事件被触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragenter</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    e.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragover</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    e.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDrop</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    e.preventDefault()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dt = e.dataTransfer</span><br><span class="line">    <span class="keyword">var</span> files = dt.files</span><br><span class="line"></span><br><span class="line">    <span class="comment">// handle files ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以把通过事件对象的dataTransfer拿到的files数组和之前相同处理，以实现预览上传等功能。有了这些事件回调，我们也可以在不同的事件给我们UI元素添加不同的class来实现更好交互效果。</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>此外上传还有二进制上传，借用iframe实现上传，详情请参考<a href="https://juejin.im/entry/590ad4682f301e00582a78b5" target="_blank" rel="noopener">这篇文章</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="[www.qcloud.com](https://link.juejin.im/?target=https%3A%2F%2Fwww.qcloud.com%2Fcommunity%2Farticle%2F985614%3FfromSource%3Dgwzcw.114059.114059.114059">文件上传那些事儿</a></p><p><a href="https://www.jianshu.com/p/374e9b9d1fb1" target="_blank" rel="noopener">前端文件上传基础</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API" target="_blank" rel="noopener">html拖放API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的文件上传&quot;&gt;&lt;a href=&quot;#简单的文件上传&quot; class=&quot;headerlink&quot; title=&quot;简单的文件上传&quot;&gt;&lt;/a&gt;简单的文件上传&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;uploadForm&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;upload&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;enctype&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myFile&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;提交&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个最简单的文件上传。但是。。。ummmm，够胆你就提交这样的代码吧&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/"/>
    
      <category term="h5" scheme="http://gajya.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/h5/"/>
    
    
      <category term="前端" scheme="http://gajya.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://gajya.github.io/tags/javascript/"/>
    
      <category term="h5" scheme="http://gajya.github.io/tags/h5/"/>
    
  </entry>
  
</feed>
